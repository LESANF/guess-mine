서버셋팅부터 시작

src폴더생성 -> yarn init으로 package.json에 적힐 내용적기.

nodemon설치 yarn add nodemon

그리고 express설치 yarn add express

또, yarn add socket.io

이제 js파일을 만듦. server.js

import ~~~express 해주고.

package.json으로 가서 실행 script적어주기.

재실행해줄거고 최신코드를 쓸거니 nodemon과 @babel/node설치

@babel/core, @babel/preset-env 역시 설치해주고

.babelrc 파일을 만들어서 preset-env를 추가시켜줌.

js파일에는 express가 import되있어야함 반드시.

--------------------------------------------------- 1.0 END--

서버를 셋팅할껀데 

server, pug, static, socketIO 까지 총 4개의 셋팅을해줘야함.

< server >

const app = express();

app.listen(4000) 

< pug >

npm i pug 후 

app.set("view engine", "pug");
app.set("views", path.join(__dirname, "views")); 추가.

src에 넣어놔서 views폴더를 찾게해줘야함. 

path를 쓰기위해 import path from "path"

views폴더를 만들고 템플릿 pug를 만들어줌.

app.get("/", (req,res) => res.render("home");}); 으로 렌더페이지 넘겨줌.

< static >

폴더를 만들고 app.use(express.static(path.join(__dirname, "static")));

다음과같이 __dirname = 디렉토리 네임 그리고 폴더명 static을 넘겨줌

이건 디렉토리에서 file을 보내주는 middleware임.

controller나 view를 확인하지않고 파일만 확인하는거임

static 폴더에 index.js파일을 생성하고 test; 라고 남겨두고

localhost:4000/index.js로 접근하면 test;라는 text가 보임.

== eslint 설치후 동작확인 ==

HTTP : GET/POST방식.

WS(Web socket) : https:// 와같이 ws://로도 쓸 수 있음.

WS는 또 다른 의사소통 방식임. HTTP와 매우다름.

HTTP는 Stateless 방식임.

< stateless / stateful >

Stateless란 http와 같이 client의 이전 상태를 기록하지 않는 접속이란 의미입니다.

그에 비해 Stateful은 client의 이전 상태를 기록하고 있는 것이죠.

Stateless는 웹서버가 사용자의 작업을 기억하고 있지 않다는 의미이고

Stateful은 사용자의 상태를 서버가 기억하고 있다가 유용한 정보로써 활용한다는 것입니다.

-------------------------------------------

유저와 서버가 있다고 가정하자.

유저는 http에서 request를 서버로 전송하는데. GET,POST 등 여러가지 형식이있음.

request(요청)을 하면 response(응답)을 하는데, 그러면 모든 요청이 끝난거임. 

서버는 유저를 기억하지않고, 유저도 서버를 기억하지 않음. 

이말은 유저와 서버의 연결이 끊긴다는거임.

서버가 유저를 기억하게 하는 유일한 방법은 쿠키를 보내는 방법임.

쿠키는 서버로 보내져서 서버는 이 유저가 "니콜라스"구나하고 알 수 있게 됌.

그러면 나에게 다시 응답을 해주고 이런것을 Stateless라고함.

stateless는 request가 보내지면 서버가 처리를 하고, 다시 request가 돌아오고 유저가 확인하면 끝임.

서로 대화가 끝나면 서버와 연결이 완전히 끊김.

또 다른 request를 보낼 때만 서버랑 연결되고 다시 응답하면 연결은 다시 끊김.

---------------------------------------------------------------------------

Socket 은 많이 다르다.

요청을 보내고 응답하고, 다시 요청을 보내고 응답하고 이런게 없음. 

WS 유저가 누군지 기억하고있음. 그리고 연결은 stateful 방식으로함.

서버가 누구랑 연결되어 있는지 알고, 한 번 연결되면 서버는 연결을 끊지 않음.

서버와 연결이 유지된 채로 있는다. 다른 유저가 들어오면 똑같이 계속 연결이 유지됨 (stateful)

다른 유저가 들어왔을 때, 서버는 2명이랑 연결되어 있는걸 알 수 있음. 

1, 2번 유저가 존재하고 서버가 1번유저에게 무언가 보내려할 때, 새로운 통로가 필요없음.

기존 req연결로 서버에 왔던 경로로 다시 서버가 유저에게 무언가 보낼 수 있음. 브릿지 생성안해도됨.

이러한 작업은 서버에 많은 메모리를 요구함. 유저들을 모두 기억해야되기 때문에.

모두 기억한다는건 서버가 연결된 세션들을 기억하고 있다는거임.

GET이나 POST같은 HTTP연결은 서버가 기억할게 별로 없기 때문에 메모리를 많이 사용하지 않음.

매번 요청이 오면 유저가 쿠키를 보내고, 서버는 유저가 누군지 파악하고 연결이 끊김.

WS는 쿠키같은게 없다. 계속 서버와 연결이 유지된채로 있기 때문이다.

연결이 유지된채로 있다는 말은 기존에 연결된 경로를 통하여 서버와 유저가 소통할 수 있고

이 경로를 통해 정보나 패킷같은것을 전송할 수 있음.

HTTP처럼 새로운 연결을 만들 필요가 없다. WS는 똑같은 경로를 이용한다.

이게 가장 큰차이점이다 HTTP vs WS.

예를 들어, 구글 크롬은 HTTP를 이해할 수 있게 만들어놨기 때문에 WS를 보여주지않음. 다른 프로토콜이기 때문에 볼 수 없음.

------------------------------------------------------------------------------

HTTP의 GET, POST, PUT 같은 것들은 모두 Stateless임. 

페이지가 한 번 보여지면 연결을 유지할 필요가 없다는 뜻임.

WebSocket은 계속 연결을 유지함. 그래서 서버는 유저를 계속 기억하고 있음.

--------------------------------------- #1.3 END



