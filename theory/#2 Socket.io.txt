const server = app.listen(PORT, handleListening);

다음과같이 server라는 변수를 만들었고 거기에 app.listen을 담았음.

왜냐하면 이 server를 SocketIO에 전달하기 위해서임.
-> const io = socketIO.listen(server);

io에 담은이유는 io가 모든 이벤트를 알아야되기 때문임.

HTTP에선 GET/POST/PUT등등 메서드가 있는데, 이것들은 라우터를 가지고있음.

하지만 소켓은 페이지가 없고 연결만 있음.

서버, 유저, 클라이언트는 이벤트를 보낼 수 있음. ( 이벤트를 받을 수 도 있음 )

서버가 hello라는 이벤트를 보내면 클라이언트는 hello라는 이벤트를 듣고있고, 클라이언트가 hello라는 이벤트를 받으면

potato라는 이벤트를 보냄 서버한테, 서버가 potato라는 이벤트를 들으면 거기에 응답함 ( 탁구처럼 주고 받고함 )

이벤트에서 가장 중요한것은 connection임. 

io.on("connection", () => console.log("Somebody Connected"));

뒷부분에 함수를 넣으면 기본적으로 socket 이벤트를 전달 받음. 위의경우는 이벤트대신 console.log로 테스트.

여기서 주의할점은 우리의 프론트부분에도 연결을해줘야함.

script로 연결해주고 socket.io/socket.io.js를 연결시켜주자.

그리고 다시 연결된 페이지의 콘솔창으로가서 io를 입력해줘야함 ( window 객체안에 io변수를 가져야됨 )

io("/"); 이렇게 입력해보면 console.log의 내용이 터미널에 찍히는걸 확인할 수 있음.

같은 서버일 경우 "/"를 입력하고, 다른 서버라면 "/"가 아닌 다른 서버로 접속을 해야함. 

우리의 경우 같은 서버의 작업이니 이렇게 정함. 시크릿창으로 똑같이 키면 2개의 콘솔이 찍히는걸 알 수 있음.

이건 2명이 연결된걸 뜻함.

우리가 만들고자 하는것은 이벤트에 기반하고 있음.

누군가 메시지를 보내면 어떤 사람은 연결되고, 어떤 사람은 연결이 끊기고, 승패를 가르고, 점수를 얻는 것모두 이벤트에서 일어남.

우리는 연결된 소켓의 정보가 필요함.

io.on("connection")으로 상상해보자, 연결된 socket 중에 어디에 연결되어있는지, 어떤 클라이언트 이벤트인지.

매번 socketIO와 연결되면 socket이라는 인자를 받을거임. 

내가 서버를 껏다키면 자동으로 두 사람이 연결될거임 ( 기본창, 시크릿창 )

왜 자동적으로 연결되냐면, 소켓은 항상 서버의 이벤트를 듣고있기 때문임.

이상태에서 서버를 꺼보면 웹페이지의 콘솔에서 에러가뜸. ( 다시 서버를 키면 터미널에 연결됐다고 콘솔이 찍힘 )

이를 보면 알 수 있듯이 서버가 멈추면 socket은 계속 서버에 접속하려고함. 서버가 다시 살아나면 연결됨.

이제 console.log로 socket을 찍어보자.

Socket은 request 객체임. express위에서 보내는 HTTP요청과 같은것 처럼.

어떤 요청이나 응답을 받고, request를 콘솔에 출력할 수 있음.

socket은 id를 가지고있음.

빈배열(let sockets = [])을 하나 만들고 거기에 id를 넣어서 확인해보자.

그리고 console.log가 아닌 io.on에서 연결될 때, sockets.push(socket.id)로 함수부분을 적어주자.

넣은 id를 확인하는 방법은 setInterval(() => console.log(sockets), 1000); 로 1초마다 sockets배열을 찍어줌. (2개의 id가 들어간게보임)

1초마다 id가표시되고, 서버를 끄면 웹페이지에서는 에러가뜸 ( 계속 연결을 시도하기때문 )

지금 까지는 직접 웹페이지에서 io("/")를 입력했고, 이제는 js파일에서 만들어보자 static/index.js로이동.

idnex.js에 io("/"); 를 입력해줌.

프론트에서 script를 연결해줌 index.js로.

서버를 실행하면 이제 웹페이지에서 localhost:4000으로 접속하면 id를 찍히는걸 확인할 수 있음.

=====================#2.0 END=================================

socketIO 의 hello world는 caht application임.

2개의 이벤트가 필요함 ( 유저가 메시지를 보내는 이벤트, 다른 유저가 join하는 이벤트 )

백엔드에서 프론트엔드로 어떻게 이벤트를 보내는지 알아보자.

누군가가 SocketIO에 연결되면 연결된 Socket를 SocketIO로 가져와서 메시지를 보낼거임.

js파일. 클라이언트부분. io("/")를 const socket으로 담자.

그리고 socket.on, socket.emit으로 처리함.

emit은 방출하다는 뜻이고 이벤트를 보내는것. 그리고 on을 사용해 보낸 이벤트를 받음.

socket.emit("hello")로 hello라는 이벤트를 서버에 보내보자. 

server에서 socket.on("hello", function) 으로 hello라는 이벤트르 받고 function을 실행하면됨.

서버 -> 클라이언트, 클라이언트 -> 서버 상관없이 모두 가능함.

https://naem1023.tistory.com/121 (기본동작 방법)

여러개의 socket이 연결되어있을때 broadcast.emit으로 보낼 수 있다. 현재 연결된 소켓을 제외한 나머지 소켓에 보내는 방법임.

창을 2개 띄웠을 때, 다른한쪽에서 broadcast.emit으로 이벤트를 보내고 on으로 받으면 현재 연결된 경로를 제외한 socket들이 이벤트를 받는거임.

============================#2.1 END=================================

< 요약 >

WebSocket 서버와 WebSocket1, 2, 3이 있다고 가정하자.

매번 Socket이 연결될 때 마다 Connection이라는 이벤트를 서버가 수신한다. [ on("connection") ] 처럼.

앞선 예제에서는 기존 express 서버를 server라는 변수에 닮았고 그걸 다시 socketIO.listen(server)로 담아서 io라는 변수로 선언했다. 

io라는 변수가 io.on("connection")으로 이벤트를 받음. 서버와 클라이언트를 잘 구분하자. 

이 연결은 계속 살아있고 서버가 연결을 끊거나 유저가 offline이 될 때 죽는다. ( 클라이언트가 연결을 끊거나 or 서버가 연결을 끊거나 )

다른 WebSocket이 서버와 연결될 때, 우리는 socket이라는 변수를 받아올 수 있음 ( addEventListener의 매개변수로 e를 받아오는것과 비슷함 )

우리는 socket을 통해 상호작용할 수 있고, 많은 것들에 접근할 수 있음.

그중하나가 emit임. 또 다른 하나는 broadcast.

emit은 기본적으로 이벤트를 보내고, 연결된 Socket에 이벤트를보냄. 만약 이벤트이름이 hello면 연결된 socket에만 hello이벤트가 간다.

하지만 현재 연결된 socket을 제외한 모든 socket에 이벤트를 보내는 방법이있음. 이것이 broadcast이다.

서버에서 이벤트가 발생하면 클라이언트가 이벤트를 받고있어야함. 이벤트를 듣고 있지 않다면 이벤트가 발생해도 쓸모가 없다.

chat application으로 예를 들자.

채팅을 할 때, socket1이 연결되어 connection 이벤트가 일어나고, connection이 일어나면 서버는 다른 socket2, 3에게 socket1이 연결됐다고 알려줌.

이러한 방식이 broadcast고, 똑같은 유저가 연결되면 또 다른 이벤트를 발생시킨다. 이건 새로운 메시지가 될거임(웃음 모양이라던지 여러가지 문구 그냥 메시지그자체)

메시지를 보냈다는건 클라이언트에서 서버로 이벤트를 보낸거고 서버는 다시 그 이벤트를 듣고 다른 socket에게 bradcast를 해줌. 

그럼 기존 메시지가 다른 socket에게도 전달됨.

만약 다른 socket이랑 이야기를 한다면 위와같은 과정이 반복되는거임.

다른 클라이언트들은 New Message라는 이벤트를 또 따로 듣고있어야함 이게 원리임.

============================#2.2 END==================================




