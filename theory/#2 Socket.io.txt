const server = app.listen(PORT, handleListening);

다음과같이 server라는 변수를 만들었고 거기에 app.listen을 담았음.

왜냐하면 이 server를 SocketIO에 전달하기 위해서임.
-> const io = socketIO.listen(server);

io에 담은이유는 io가 모든 이벤트를 알아야되기 때문임.

HTTP에선 GET/POST/PUT등등 메서드가 있는데, 이것들은 라우터를 가지고있음.

하지만 소켓은 페이지가 없고 연결만 있음.

서버, 유저, 클라이언트는 이벤트를 보낼 수 있음. ( 이벤트를 받을 수 도 있음 )

서버가 hello라는 이벤트를 보내면 클라이언트는 hello라는 이벤트를 듣고있고, 클라이언트가 hello라는 이벤트를 받으면

potato라는 이벤트를 보냄 서버한테, 서버가 potato라는 이벤트를 들으면 거기에 응답함 ( 탁구처럼 주고 받고함 )

이벤트에서 가장 중요한것은 connection임. 

io.on("connection", () => console.log("Somebody Connected"));

뒷부분에 함수를 넣으면 기본적으로 socket 이벤트를 전달 받음. 위의경우는 이벤트대신 console.log로 테스트.

여기서 주의할점은 우리의 프론트부분에도 연결을해줘야함.

script로 연결해주고 socket.io/socket.io.js를 연결시켜주자.

그리고 다시 연결된 페이지의 콘솔창으로가서 io를 입력해줘야함 ( window 객체안에 io변수를 가져야됨 )

io("/"); 이렇게 입력해보면 console.log의 내용이 터미널에 찍히는걸 확인할 수 있음.

같은 서버일 경우 "/"를 입력하고, 다른 서버라면 "/"가 아닌 다른 서버로 접속을 해야함. 

우리의 경우 같은 서버의 작업이니 이렇게 정함. 시크릿창으로 똑같이 키면 2개의 콘솔이 찍히는걸 알 수 있음.

이건 2명이 연결된걸 뜻함.

우리가 만들고자 하는것은 이벤트에 기반하고 있음.

누군가 메시지를 보내면 어떤 사람은 연결되고, 어떤 사람은 연결이 끊기고, 승패를 가르고, 점수를 얻는 것모두 이벤트에서 일어남.

우리는 연결된 소켓의 정보가 필요함.

io.on("connection")으로 상상해보자, 연결된 socket 중에 어디에 연결되어있는지, 어떤 클라이언트 이벤트인지.

매번 socketIO와 연결되면 socket이라는 인자를 받을거임. 

내가 서버를 껏다키면 자동으로 두 사람이 연결될거임 ( 기본창, 시크릿창 )

왜 자동적으로 연결되냐면, 소켓은 항상 서버의 이벤트를 듣고있기 때문임.

이상태에서 서버를 꺼보면 웹페이지의 콘솔에서 에러가뜸. ( 다시 서버를 키면 터미널에 연결됐다고 콘솔이 찍힘 )

이를 보면 알 수 있듯이 서버가 멈추면 socket은 계속 서버에 접속하려고함. 서버가 다시 살아나면 연결됨.

이제 console.log로 socket을 찍어보자.

Socket은 request 객체임. express위에서 보내는 HTTP요청과 같은것 처럼.

어떤 요청이나 응답을 받고, request를 콘솔에 출력할 수 있음.

socket은 id를 가지고있음.

빈배열(let sockets = [])을 하나 만들고 거기에 id를 넣어서 확인해보자.

그리고 console.log가 아닌 io.on에서 연결될 때, sockets.push(socket.id)로 함수부분을 적어주자.

넣은 id를 확인하는 방법은 setInterval(() => console.log(sockets), 1000); 로 1초마다 sockets배열을 찍어줌. (2개의 id가 들어간게보임)

1초마다 id가표시되고, 서버를 끄면 웹페이지에서는 에러가뜸 ( 계속 연결을 시도하기때문 )

지금 까지는 직접 웹페이지에서 io("/")를 입력했고, 이제는 js파일에서 만들어보자 static/index.js로이동.

idnex.js에 io("/"); 를 입력해줌.

프론트에서 script를 연결해줌 index.js로.

서버를 실행하면 이제 웹페이지에서 localhost:4000으로 접속하면 id를 찍히는걸 확인할 수 있음.

=====================#2.0 END=================================


