기존 js 강의에서 사용했던 painting을 그대로 가져와서 assets/js/paint.js로 이식함.

그림판에 뭘 하던지간에 이벤트를 emit 해야함. 그림을 그리던 안그리던 그림판에 대해 일어나는 모든 일에대해 이벤트를 만들거임.

function onMouseMove(event) {
  const x = event.offsetX;
  const y = event.offsetY;
  if (!painting) {
    beginPath(x, y);
    getSocket().emit(window.events.beginPath, { x, y });
  } else {
    strokePath(x, y);
    getSocket().emit(window.events.strokePath, { x, y });
  }
}

다음과 같이 onMouseMove 함수에 getSocket() 함수로 emit해줌.

선을 새로 만들면 이걸 서버쪽으로 스트리밍해줘야하고 서버쪽으로 이벤트를 보내주는거임.

beginPath: "beginPath" 를 events.js에 추가해주고 코드에선 window로 접근해서 이벤트를준다. 클라이언트 부분이기때문.

그리고 데이터는 x,y를줌. strokePath또한 추가해줌. 이제 emit하고있음.

듣는부분 (on)은 socketController.js에서 처리.

누군가 begin, stroke ( 그리기 시작했을때 ) 그리는 사람을 제외한 모든 소켓들은 그 그리는걸 봐야함.

그렇기 때문에 events.beginPath와 events.strokePath가 on되면 각자 events.beganPath, events.strokedPath를 broadcast해줘야함.

  socket.on(events.beginPath, ({ x, y }) =>
    broadcast(events.beganPath, { x, y })
  );

  socket.on(events.strokePath, ({ x, y }) => {
    broadcast(events.strokedPath, { x, y });
  });

위와같이 코드가 이루어짐.

이건 두단계의 과정으로 나누어짐 첫번째 과정은 이벤트를 서버로 보내는거고, 두번째는 서버에서 이벤트를 리스닝해서 모두에게 broadcast해주는거.

paint.js에서 2개의 함수를 만들어야함 began과 stroked에 대한 함수.

export const handleBeganPath = ({ x, y }) => beginPath(x, y);
export const handleStrokedPath = ({ x, y }) => strokePath(x, y);

위의 두함수를 paint.js에 추가.

이 이벤트관리는 sockets.js에서 처리함 왜냐면 sockets에서 이벤트 구독을 처리하고 있기때문.

aSocket.on(events.beganPath, handleBeganPath);
aSocket.on(events.strokedPath, handleStrokedPath);

began과 stroked를 듣고 앞서쓴 두 함수를 사용해줌 ( sockets.js에서처리 )

처리될 두 함수를 보면 beginPath와 strokePath 두함수가 또 있다.

const beginPath = (x, y) => {
  ctx.beginPath();
  ctx.moveTo(x, y);
};

const strokePath = (x, y) => {
  ctx.lineTo(x, y);
  ctx.stroke();
};

인자로 받은 x,y를 이용하여 처리해줌.

서버에서 path가 시작되었다는 (beganPath) 이벤트를 받으면, beginPath 함수를 호출할거임.

유저가 그림을 그리고 있지 않을 때 호출되는 beginPath랑 동일함. ( onMouseMove 의 함수와 동일 )

지금 까지 했던 작업을 요약하자면 기본적으로 굉장히 많은 x, y좌표를 가져왔고 누군가 접속했을때 가져온 좌표를 전달해주는거임.

=========================#6.0 END===================================

선색깔, 화면채우기 등을할건데 

일단 채우기 events를 등록해주자

fill: "fill",
filled: "filled"

이렇게 채우기 이벤트를 등록해주고 사용하면되고 stroked. 즉 선색깔 을 넘겨줘야함 

paint.js에서 export const handleStrokedPath = ({ x, y, color }) => strokePath(x, y, color);

다음과같이 함수 export

socketController에서도   

socket.on(events.strokePath, ({ x, y, color }) => {
    broadcast(events.strokedPath, { x, y, color });
  });

이벤트를 받아줌 그리고 broadcast로 다른 소켓들에게도 선의 색깔을 보내줌.

위의 handleStrokedPath의 경우 sockets.js에서 initSockets안에서 이벤트를 받아 처리해야함.

const strokePath = (x, y, color = null) => {
  let currentColor = ctx.strokeStyle;
  if (color !== null) {
    ctx.strokeStyle = color;
  }
  ctx.lineTo(x, y);
  ctx.stroke();
  ctx.strokeStyle = currentColor;
};

strokePath의 함수를 자세히 살펴보자. strokedPath는 handleStrokedPath 함수에서 받은 파라매터로 처리하는 형식임.

currentColor은 계속 변할거니 let으로 주고 color의 기본색상은 null로 넣어줌.

color에 null을 준이유는 확실하게 체크하기위해서임. 만약 color를 인자로 받았으면

if문이 진행될거다 조건이 color가 null이 아닐떄니까.

그렇게되면 ctx.strokeStyle. 즉 현재 색상을 color로 값을 넣어주는거임.

내가 그림을 그릴 때 x,y그리고 ctx의 strokeStyle정보도 보내는거임 보낸 이정보를 바탕으로 broadcast하여 상대방에게 색상도 전달함.

이벤트를 실행할때마다 ctx(context)를 변경해주고 있음.

하지만 다른사람이 그리는 것을 끝내면, 다시 자기원래의 context로 돌아가는거임 검은색으로.

fill도 똑같음.

========================# 6.1 END ===========================

< 유저 접속파트, 유저 스코어파트 >

서버단부터 처리해보자 socketController에 로직들을 추가시킬거임.

일단 우리가 하고자한 유저, 유저의 스코어, 유저의 닉네임의 정보를 저장시켜줄 배열이하나 필요함.

let sockets = []; 로 빈배열 하나 생성.

그리고 이 배열에 값들을 .push 로 넣어줄거임.

닉네임을 정할때 유저가 추가되는것이고 이때 유저의 점수는 0점. 신규유저를 등록하는 부분이다.

setNIckname 이벤트를 받는 부분에

sockets.push({ id: socket.id, points: 0, nickname }); 다음과같은 push문을 선언해줌.

유저가 들어오는 부분을 처리했으니, 유저가 떠나는 부분을 설정해야함. 

disconnect 이벤트를 듣는곳(on)에서 filter로 걸러줄거임.

sockets = sockets.filter((aSocket) => aSocket.id !== socket.id);

sockets는 우리가 기존에 유저의 정보를 저장하기위한 빈 array. 

해당 배열을 filter로 걸러서 유저가 떠나고 새로운 배열을 filter를 통해 반환 받음. 반환받은 배열은 sockets에 저장됨.

조건은 disconnect된 socket.id가 기존 socket.id와 같지않으면 true. 이 조건에 만족하는 배열을 받음.

LESA라는 닉네임을 쓰는 유저가 떠나면 기존 socket에서 LESA가 아닌 id들을 배열로 다시 받는거임. 

LESA는 떠낫으니 기존배열에 없다.

이렇게 변경이 일어나면 모두가 알 수 있게 해야하는데 update관련 이벤트를 만들어줄거임.

events.js에 playerUpdate: "playerUpdate" 이벤트추가. 

이 부분은 broadcast로 처리하면안됨. 예외없이 모두에게 알려야함. 이럴 땐 io를 이용해야함.

우리가 sever.js에서 서버와 연결해준 io.

server.js에서 기존 io.on으로 connection 이벤트를 듣고있고, socketController로 분할정복하여 처리해줌.

socketController에 넘기는 파라매터에 io를 추가해줌. 총 socket과 io 두가지를 파라매터로 보냄.

server.js에서 보냈으니 기존 socketController 함수에서도 파라매터 io를 받는 부분을 추가.

socketController에서 새롭게 받은 io 파라매터도 이용해야하니 함수를 하나만듦.

const superBroadcast = (event, data) => io.emit(event, data);

superBroadcast 함수는 이벤트와, 데이터를 받고 이를 이용하여 io.emit으로 전체적으로 emit해줌.

superBroadcast(events.playerUpdate, { sockets }); 

위 함수는 playerUpdate 이벤트를 emit하고있는거임 그리고 유저의 정보를 담은 배열인 sockets를 보내줌.

이와 같은 행위는 닉네임을 정할때, 끊길때 2번 동일하게 발생하는데 반복되었기 때문에

함수형 프로그래밍으로 줄여서 사용해줌.

 const sendPlayerUpdate = () =>
    superBroadcast(events.playerUpdate, { sockets });

다음과같이 sendPlayerUpdate 함수에 만들어서 넣어 사용함.

io(서버)는 모든 clients에게 메시지를 보냄. 이제 서버단끝. 프론트부분을 처리해야됨 

assets/js/player.js 파일생성.

export const handlePlayerUpdate = ({ sockets }) => { console.log(sockets) } 

임시로 sockets를 console로 찍는 handlePlayerUpdate 함수생성.

sockets.js 와서 이벤트를 듣고 handlePlayerUpdate가 실행되는거임.

socket.on(events.playerUpdate, handlePlayerUpdate); 다음구문을 sockets.js의 initSockets에 추가.

playerUpdate를 들으면 handlePlayerUpdate 함수실행. 정상적으로 들어갔을때, 끊겼을때 콘솔에 유저의 정보가나옴.

=====================#6.2 END==========================

유저목록을 구성했고 구성한걸 클라이언트에 보이게(view) 해보자.

chat 위에 나타나게 할거므로, .player__board#jsPBoard ( div 하나생성 )

클라이언트 처리부분이므로 players.js 에서 처리.

jsPBoard를 board로 선언하고 getElementById로(DOM) 가져옴. 각 socket들을 board에 넣어줄거임.

export const handlePlayerUpdate = ({ sockets }) => {
  addPlayers(sockets);
};

서버로부터 받은 sockets를 handlePlayerUdate 함수를 이용해 addPlayers에 인자로 전해줌 sockets=players

const addPlayers = (players) => {
  board.innerHTML = "";
  players.forEach((player) => {
    const playerElement = document.createElement("span");
    playerElement.innerText = `${player.nickname}: ${player.points}`;
    board.appendChild(playerElement);
  });
};

addPlayers 함수의 내용임. 인자명으로 players고 이건 socket임. socket은 글로벌적으로 사용할 수 있음.

forEach 반복문으로 players를 돌림. player로 칭하고 createElement(span)를 생성하고 거기에 innerText를 붙임.

player는 socket과 같으니 socket에는 우리가 전해준 points와 nickname이 있음. 그리고 board에 붙임.

foreach에서 function(item, index)임. 우리의경우 item만 준거임.

foreach에서 우리가준 item=player는 players 배열을 foreach한 한요소부분임. forEach에 player든 tomato든 변수명은 중요하지않음.

players는 sockets.psuh로 id, points, nickname이 들어가있는것과 똑같은거임. 넘어오면서 players 이름으로 바꼈을뿐. 

그 배열의 요소들을 반복문으로 다시 빼낸게 player다.

유저가 추가될때마다 sockets에 push되어 변화가 일어날거고 그럼 handlePlayerUpdate함수와 addPlayers 함수가 매번 실행됨.

기존의 board를 한번 다지우고 다시 덮어써서 appendChild되는 느낌임. board.innerHTML=""; 로 이부분을 처리함. 넣지않으면 무한중첩됨.

--------------------------

게임이 시작되는 조건은, 처음에 내가 들어오면 socket이 하나밖에없고 그 뒤에 누군가 더 들어와서 2인이상이되면 게임이 시작되는거임.

한명만 로그인 되어있는 상황에서는 게임을 시작할 수 없음.

그리고 게임이 시작되면 곧 시작된다는 안내문구등 이런걸 넣어줘야함.

socketController로 돌아와서 inProgress 변수를 만들자 false와 true로 변할꺼니 let으로 선언하고 초기값은 false로 준다.

startGame 함수를 만들자.

  const startGame = () => {
    if (inProgress === false) {
      inProgress = true;
      const leader = chooseLeader();
      word = chooseWord;
    }
  };

다음과 같이 선언하고 setNickname 부분의 마지막에 startGame(); 으로 함수를 실행하게함.

inProgress가 false 부분일 때 게임이 시작되고 시작된후 true바꿔줌.

처음에 그림그리는 사람이 필요하니 painter를 정하자 코드에선 leader라고 칭했음.

const leader = chooseLeader();   chooseLeader() 함수를 만들었고

const chooseLeader = () => {
  sockets[Math.floor(Math.random() * sockets.length)];
};

우리가 기존에 유저정보를 담는 sockets의 배열에서 무작위로 뽑음.

painter가 그릴 그림의 정답(단어)도 정해줘야함.

일단 단어의양이 많으니 따로 js파일을 만들어주자. src/words.js

단어를 담은 배열(words)을 선언해주고 모두 string형으로 저장함.

export const chooseWord = () => words[Math.floor(Math.random() * words.length)];

다음 함수를 생성하고 우리가 선언한 words(단어모음)에서 랜덤으로 정해짐.

socketController에서 chooseWord 함수를 통해 단어를 담을 let word = null; 을 선언함.

다시 startGame으로 돌아와 word = chooseWord() 로 사용해주면 된다.

---------------------------------------------------------------

리더로 뽑힌 사람의경우 자기가 리더라는 사실을 전달받을거임.

리더가 아닌사람들은 다른 정보를 얻을거임. 게임시작이라는 내용, 자기가 리더가 아니라는 사실

앞으로 구현해야 할 것.

1. 리더가 누구인지 알려주는 함수

2. 게임이 시작되었다 라는걸 모두에게 알려줄 함수.

만약 내가 게임 시작이라는 알람만 받고 다른건 못받으면 내가 리더가 아니라는 소리임.

====================== #6.3 END ===========================








