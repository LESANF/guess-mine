누가 로그인 되었나 알림기능이 필요함. 

알림기능은 누군가 입장하거나 로그아웃 했을 때 화면 아래 띄워줄 작은 창임.

분할하여 하는게 좋은방법이므로, assets/js/notification.js 파일 생성.

home.pug에 div#jsNotifications 로 div하나 생성하고

notification.js 에서 id를 DOM형태로 가져옴.

나를 제외한 모든이들에게 알림이 가야하니 broadcast방식을 써야함.

socketController로 와서 나를 제외한 모든이들(broadcast)에게 메시지를 보내야함.

socket.broadcast.emit(events.newUser, { nickname });

다음과같은 코드를 socketController 함수에 넣음.

여기에 쓰이는 newUser를 events.js에 추가해서 쓰자.

socket에 이벤트를 전해줄때 원래 "name" 이런식으로 보내는데 관리에 용이하도록

newUser : "newUser"로 정의하고 events.newUser 이렇게사용함.

broadcast.emit으로 나를제외한 모든유저에게 이벤트를 방출시키고 그와 동시에 nickname 데이터도 넣어줌.

------------------------------------------

sockets용 파일을 하나 더만들거다 main.js에 import해주고 파일명은 sockets.js

여기서는 모든 신청을 제어하는거임.

< scokets.js 코드 >

import { handleNewUser } from "./notifications";

let socket = null;

export const getSocket = () => socket;

export const updateSocket = (aSocket) => {
  socket = aSocket;
};

export const initSockets = (aSocket) => {
  const { events } = window;

  updateSocket(aSocket);
  aSocket.on(events.newUser, handleNewUser);
};

-------------------------------------------------------

현재 noticifations.js 의 코드는 아래와 같다.

const notification = document.getElementById("jsNotifications");

export const handleNewUser = ({ nickname }) => {
  console.log(nickname, "just joined");
};

handleNewUser 함수가 실행되면 인자로 nickname을 받고 정확히는 data안의 nickname 

저런 표현방식은 data.nickname으로 할 수있지만 {nickname}으로 꺼내쓴거임.

해당 함수가 실행되면 파라메터로받은 nickname이 출력될거임.

이함수는 export const되어 sockets.js에서 처리됨

--------------------------------------------------------

로그인한 순간에 initSockets(); 함수를 실행시켜준다.

login.js에서 logIn함수임

const logIn = (nickname) => {
  // eslint-disable-next-line no-undef
  const socket = io("/");
  socket.emit(window.events.setNickname, { nickname });
  initSockets(socket);
};

logIn이 일어나면 socket이 연결될거고 initSockets을통해 socket을 인자로 보내줌.

현재 socket에 접근할때 global화 시켜줬으니 window.socket으로 사용되고있다.

이렇게 사용해도되지만 더 명확하고 좋게쓰기위해 함수를통해 socket을 반환시켜줄거임.

현재 sockets.js에 내부 코드에서

export const getSocket = () => socket; 함수를 보자

getSocket는 socket을 반환해줌 sockets.js에서 socket은 let socket = null; 이다. 아무것도 들어있지않음.

그래서 이 socket을 바꿔주는 updateSocket 함수를 생성한다.

export const updateSocket = (aSocket) => {
  socket = aSocket;
};

updateSocket은 파라매터로 aSocket을 받고 기존에 null이었던 socket변수에 aSocket으로 바꿔준다.

aSocket은 initSockets함수로 받아온 원래의 socket임. 변수명이 겹치니 aSocket으로 표기한거.

initSockets 함수는 login.js에서 logIn 함수에서 로그인 될 때, socket을 인자로 받았음.

initiSockets 함수를통해 aSocket.on으로 newUser 이벤트를 on(받으면) handleNewUser를 통해 broadcast되어 알림을 보낼수있음.

이제부터 socket에 연결할때는 getSocket().emit 이런식으로 사용할 수 있음. 

이미 로그인처리때부터 소켓으로 연결되고 그 socket을 받아 updateSocket으로 업데이트된 소켓이니.

궁극적으로 이벤트 핸들링을 위한 별도의 sockets 파일도 만들었고 socket컨트롤을 할 별도의 파일도 있으니

window.socket 이런식으로 해줄필요가 없는거다.

================ 5.0 END ( Refactoring ) ====================

기존에 선언한 notifications, DOM으로 가져온걸 그냥 div지우고 body를 가져와서 body에 붙일거임

->const body = document.querySelector("body");

아래 코드는 리팩토리, connect&&disconnect에 대한 notifications.js에 code이다

const body = document.querySelector("body");

const fireNotification = (text, color) => {
  const notification = document.createElement("div");
  notification.innerText = text;
  notification.style.backgroundColor = color;
  notification.className = "notification";
  body.appendChild(notification);
};

export const handleNewUser = ({ nickname }) =>
  fireNotification(`${nickname} just joined!`, "rgb(0, 122, 255)");

export const handleDisconnected = ({ nickname }) =>
  fireNotification(`${nickname} just left!`, "rgb(255, 149, 0)");
=============================================================

fireNotification 함수는 text, color 의 2개의 인자를 받고 

접속됐을때 handleNewUser, 끊겼을때 handleDisconnected 함수 실행. 

위의 두 함수는 모두 nickname을 인자로 받고, fireNotificaton에 들어갈 text, color 인자를 넣어줌.

fireNotification은 notification이라는 div를 생성하고 인자로받은 text, color를 적용.

그리고 class부여 후 선언한 body에 붙여줌. notification의 css는 미리처리되어있음. scss/notifications.scss에

disconnect에 대한 이벤트를 등록해야함.

events.js로 이동하여   disconnected: "disconnected" 추가. 이렇게 하는이유는 직접 "disconnected"로 socket에 전달할 수 있지만

오타방지와 분할정복으로 관리, 사용에 도움주기위해 별도로 만들어서 사용하는거임.

하나 주의해야할건 우리가 만든 이벤트명이아니라 서버쪽에서 disconnect하는 기존이벤트다 "connection"처럼 "disconnect"임.

이제 disconnect 됐을때, 나를제외한 모든 소켓들에게 끊기거나, 접속됐다고 알려야되기 때문에 broadcast방식으로 emit한다.

broadcast를 간소화 하기위해 함수형으로 처리했음. 그리고 많이 쓰이기때문임.

const broadcast = (event, data) => socket.broadcast.emit(event, data);

이게 함수형 프로그래밍임.

socket.on(events.disconnect, () => {
    broadcast(events.disconnected, { nickname: socket.nickname });
  });

events.disconnect는 연결을 끊는 이벤트고 뒤의 disconnected는 직접만든 disconnected임.

disconnect라는 끊김을위해 제공되는 이벤트를 on(들음)하게되면, broadcast로 나를 제외한 모든 소켓에게

disconnected 이벤트와 nickname변수를 뿌려줌(emit).

socket.js에서 initSockets를 통해 aSocket.on으로 disconnected를 듣고 handleDisconnected를 통해 이벤트가처리됨.

===========================# 5.1 END======================

메시지 처리 sendMsg, newMsg

sendMsg로 이벤트를 발생시키고 newMsg로 broadcast처리하여 다른 socket에 메시지를 띄우는 형식이다.

아래는 assets/js/chat.js 의 코드내용임

import { getSocket } from "./sockets";

const messages = document.getElementById("jsMessages");
const sendMsg = document.getElementById("jsSendMsg");

const appendMsg = (text, nickname) => {
  const li = document.createElement("li");
  li.innerHTML = `
    <span class="author ${nickname ? "out" : "self"}">${
    nickname ? nickname : "You"
  } : </span> ${text}
    `;
  messages.appendChild(li);
};

const handleSendMsg = (e) => {
  e.preventDefault();
  const input = sendMsg.querySelector("input");
  const { value } = input;
  getSocket().emit(window.events.sendMsg, { message: value });
  input.value = "";
  appendMsg(value);
};

export const handleNewMessage = ({ message, nickname }) =>
  appendMsg(message, nickname);

if (sendMsg) {
  sendMsg.addEventListener("submit", handleSendMsg);
}

===================================================

채팅창, 채팅입력창을 만들어줘야 되므로 html도 손봐준다.

.gameContainer#jsGame
            .chat
                ul.chat__messages#jsMessages
                form.chat__form#jsSendMsg
                    input(placeholder="Write a message", type="text")

gameContainer에 다넣음.

jsMessages와 jsSendMsg를 DOM형태로 가져옴.

그리고 가져온 jsSendMsg가 존재하면 submit이벤트를 달고 handleSendMsg 함수를 실행

SendMsg함수는 e.preventDefault();로 새로고침되는걸 방지해주고

안에있는 input요소를 가져온다.

getSocket() 함수는 socket을 반환해주는 함수임.

sendMsg를 emit 해주고 message 객체를 보낸다 message에 들어갈 값은 input.value임.

클라이언트에서 처리하는거니 window.events.sendMsg임.

그리고 submit한후 메시지창을 비워야하니 공백으로 처리해주고 appendMsg 함수에 인자로 value를 넘긴다.

그리고 appendMsg로 넘어가자

const appendMsg = (text, nickname) => {
  const li = document.createElement("li");
  li.innerHTML = `
    <span class="author ${nickname ? "out" : "self"}">${
    nickname ? nickname : "You"
  } : </span> ${text}
    `;
  messages.appendChild(li);
};

=========================================

2가지로 나뉨 appendMsg(value), appendMsg(message, nickname).

전자는 SendMsg로 인해 value값만 들어가고 nickname인자가 없으므로 You가 출력됨.

뒤의경우는 handleNewMessage 함수에의해 nickname까지 들어옴.

그리고 li.innerHTML로 인해 class가 author이고 nickname의 유무에따라 out, self의 클래스가 별도로 추가됨

out, self의 구분으로 나 혹은 상대방의 이름에 색상이 입혀지는 css가 적용됨.

이제 newMsg에 대한 처리를 할껀데 마찬가지로 모든 이벤트를 관리하기위해 events에서 객체화해줌.

socketController에서 sendMsg에 대한 이벤트를 받으면(on)

 socket.on(events.sendMsg, ({ message }) => {
    broadcast(events.newMsg, { message, nickname: socket.nickname });
  });

broadcast처리해줄거임 broadcast는 함수화 되어있음 ( socket.broadcast.emit )

newMsg 이벤트를 방출시키고 data로는 message와 nickname을 줌.

이에 대한 데이터를 받는 부분과 무슨 어디에서 emit된걸 on으로 들은거냐면.

getSocket().emit(window.events.sendMsg, { message: value }); ( handleSendMsg 함수 ) 를통해 처리됨.

여기서 sendMsg이벤트를 방출시키고 socketController에서 on해서 처리됨.

initSockets를 통하여 로그인할때 socket을 전달받고 그 소켓에 대하여

events.newMsg, handleNewMessage가 처리되는거임. socket.js에서 리스닝하는거다.